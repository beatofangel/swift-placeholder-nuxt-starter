// yarn prisma migrate dev --name [init]
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "fieldReference"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(uuid()) @db.VarChar(36)
  name          String         @default("user")
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         RoleRel[]
  workspaces    Workspace[]
  docFavourite  Boolean        @default(true)
  docGroupId    String?
  docGroup      DocGroup?      @relation(fields: [docGroupId], references: [id])
  docPermId     String?
  docPerm       DocPermission? @relation(fields: [docPermId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// OnlyOffice
model DocGroup {
  id                  String                  @id @default(uuid()) @db.VarChar(36)
  name                String
  user                User[]
  reviewGroups        DocReviewGroup[]
  commentViewGroups   DocCommentViewGroup[]
  commentEditGroups   DocCommentEditGroup[]
  commentRemoveGroups DocCommentRemoveGroup[]
  userInfoGroups      DocUserInfoGroup[]
}

// OnlyOffice
model DocPermission {
  id                      String                  @id @default(uuid()) @db.VarChar(36)
  changeHistory           Boolean
  chat                    Boolean
  comment                 Boolean
  copy                    Boolean
  deleteCommentAuthorOnly Boolean
  download                Boolean
  edit                    Boolean
  editCommentAuthorOnly   Boolean
  fillForms               Boolean
  modifyContentControl    Boolean
  modifyFilter            Boolean
  print                   Boolean
  protect                 Boolean
  rename                  Boolean
  review                  Boolean
  reviewGroups            DocReviewGroup[]
  commentViewGroups       DocCommentViewGroup[]
  commentEditGroups       DocCommentEditGroup[]
  commentRemoveGroups     DocCommentRemoveGroup[]
  userInfoGroups          DocUserInfoGroup[]
  user                    User[]
}

// OnlyOffice
model DocReviewGroup {
  id         String          @id @default(uuid()) @db.VarChar(36)
  docGroupId String
  docGroup   DocGroup        @relation(fields: [docGroupId], references: [id])
  docPerm    DocPermission[]
}

// OnlyOffice
model DocCommentViewGroup {
  id         String          @id @default(uuid()) @db.VarChar(36)
  docGroupId String
  docGroup   DocGroup        @relation(fields: [docGroupId], references: [id])
  docPerm    DocPermission[]
}

// OnlyOffice
model DocCommentEditGroup {
  id         String          @id @default(uuid()) @db.VarChar(36)
  docGroupId String
  docGroup   DocGroup        @relation(fields: [docGroupId], references: [id])
  docPerm    DocPermission[]
}

// OnlyOffice
model DocCommentRemoveGroup {
  id         String          @id @default(uuid()) @db.VarChar(36)
  docGroupId String
  docGroup   DocGroup        @relation(fields: [docGroupId], references: [id])
  docPerm    DocPermission[]
}

// OnlyOffice
model DocUserInfoGroup {
  id         String          @id @default(uuid()) @db.VarChar(36)
  docGroupId String
  docGroup   DocGroup        @relation(fields: [docGroupId], references: [id])
  docPerm    DocPermission[]
}

/// Casbin rbac访问控制
model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view RoleRel {
  sub  String
  psub String
  user User?  @relation(fields: [sub], references: [id])

  @@unique([sub, psub])
}

enum WsType {
  REPLACEMENT
}

model Workspace {
  id    String @id @default(uuid()) @db.VarChar(36)
  type  WsType @default(REPLACEMENT)
  data  Json?
  owner String
  user  User   @relation(fields: [owner], references: [id])
}

model BusinessCategory {
  /// id
  id        String   @id @default(uuid()) @db.VarChar(36)
  /// pid
  pid       String?  @db.VarChar(36)
  /// 名称
  name      String   @unique @db.VarChar(200)
  /// 图标
  icon      String?  @db.VarChar(50)
  /// 序号
  ordinal   Int      @default(0)
  /// 创建日期
  createdAt DateTime @default(now())
  /// 更新日期
  updatedAt DateTime @updatedAt
  /// version
  version   Int

  templates BcTplRel[]
  parent    BusinessCategory?  @relation("BusinessCategoryParentChildren", fields: [pid], references: [id])
  children  BusinessCategory[] @relation("BusinessCategoryParentChildren")
}

model Template {
  id                 String        @id @default(uuid()) @db.VarChar(36)
  name               String        @unique @db.VarChar(200)
  path               String        @db.VarChar(1000)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  version            Int
  businessCategories BcTplRel[]
  // placeholderGroups  TplPhGrpRel[]
  placeholderItems   TplPhItmRel[]
}

// model PlaceholderGroup {
//   id               String        @id @default(uuid()) @db.VarChar(36)
//   name             String        @unique @db.VarChar(200)
//   createdAt        DateTime      @default(now())
//   updatedAt        DateTime      @updatedAt
//   version          Int
//   placeholderItems PhGrpItmRel[]
//   templates        TplPhGrpRel[]
// }

model PlaceholderItem {
  id              String        @id @default(uuid()) @db.VarChar(36)
  name            String        @unique @db.VarChar(200)
  type            String        @db.VarChar(20)
  format          String?       @db.VarChar(100)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  version         Int
  // placeholderGroups PhGrpItmRel[]
  templates       TplPhItmRel[]
  placeholderTags PhItmTagRel[]
}

model PlaceholderTag {
  id               String        @id @default(uuid()) @db.VarChar(36)
  name             String        @unique @db.VarChar(200)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  version          Int
  placeholderItems PhItmTagRel[]
}

model BcTplRel {
  bcId             String
  tplId            String
  ordinal          Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  version          Int
  businessCategory BusinessCategory @relation(fields: [bcId], references: [id])
  template         Template         @relation(fields: [tplId], references: [id])

  @@id([bcId, tplId])
}

// model TplPhGrpRel {
//   tplId            String
//   phGrpId          String
//   ordinal          Int              @default(0)
//   createdAt        DateTime         @default(now())
//   updatedAt        DateTime         @updatedAt
//   version          Int
//   placeholderGroup PlaceholderGroup @relation(fields: [phGrpId], references: [id])
//   template         Template         @relation(fields: [tplId], references: [id])

//   @@id([tplId, phGrpId])
//   @@index([phGrpId], map: "TplPhGrpRel_phGrpId_fkey")
// }

// model PhGrpItmRel {
//   phGrpId          String
//   phItmId          String
//   ordinal          Int              @default(0)
//   createdAt        DateTime         @default(now())
//   updatedAt        DateTime         @updatedAt
//   version          Int
//   placeholderGroup PlaceholderGroup @relation(fields: [phGrpId], references: [id])
//   placeholderItem  PlaceholderItem  @relation(fields: [phItmId], references: [id])

//   @@id([phGrpId, phItmId])
//   @@index([phItmId], map: "PhGrpItmRel_phItmId_fkey")
// }

model TplPhItmRel {
  tplId           String
  phItmId         String
  ordinal         Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  version         Int
  placeholderItem PlaceholderItem @relation(fields: [phItmId], references: [id])
  template        Template        @relation(fields: [tplId], references: [id])

  @@id([tplId, phItmId])
}

model PhItmTagRel {
  phItmId         String
  phTagId         String
  ordinal         Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  version         Int
  placeholderItem PlaceholderItem @relation(fields: [phItmId], references: [id])
  placeholderTag  PlaceholderTag  @relation(fields: [phTagId], references: [id])

  @@id([phItmId, phTagId])
}
